#! /usr/bin/env python
# -*- coding: utf-8 -*-

"""
Project Euler, problem 12: Highly divisible triangular number
(http://projecteuler.net/problem=12).

The sequence of triangle numbers is generated by adding the natural numbers. So
the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten
terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred
divisors?
"""

from sets import Set
import euler

def triangle(num):
    """
    The triangle number num is the sum of the numbers in the range [1, num]
    """
    return sum([i for i in range(1, num+1)])

def get_prime_factors(num, primes):
    """
    Compute the prime factors of a number. A list of prime numbers (candidates
    to be factors) is passed to optimized the performance.
    """
    if num in primes:
        return Set([num])

    for i in primes:
        if num % i == 0:
            return Set([i]).union(get_prime_factors(num / i, primes))

def combine_factors(prime_factors, num):
    """
    Combine a list of prime factors to compute the non prime factors of a number
    """
    res = []
    for factor1 in prime_factors:
        for factor2 in prime_factors:
            if num % (factor1 * factor2) == 0:
                res.append(factor1 * factor2)
    return Set(res)

def get_all_factors(num, prime_factors):
    """
    Computes all the factors of a number, given its prime factors.
    """

    adding_new_factors = True

    factors = Set(prime_factors)

    while adding_new_factors:
        num_factors = len(factors)
        factors = factors.union(combine_factors(factors, num))
        adding_new_factors = (len(factors) > num_factors)

    return factors

def main():
    """
    The most expensive process (computationally) is the factor calculation.
    """

    found_solution = False
    i = 1
    primes = euler.eratosthenes_sieve(200000)

    max_factors = 0

    while not found_solution:
        i += 1
        num = triangle(i)

        prime_candidates = [x for x in primes if x <= num]
        prime_factors = get_prime_factors(num, prime_candidates)

        all_factors = get_all_factors(num, Set(prime_factors))

        if len(all_factors) > max_factors:
            max_factors = len(all_factors)
            print "max num factors: %d" % max_factors

        found_solution = len(all_factors) > 500

    print "The first triangle number with more than 500 factors is %d " % num

if __name__ == "__main__":
    main()
